<?xml version="1.0"?>
<project name="The Right Stuff Blog Template"
		 default="all"
		 xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd">

	<!-- Tasks that run on every build.
	________________________________________________________________________________________________________________ -->

	<!-- Load developer-specific configuration. -->
	<if test="${file::exists('local.properties')}">
		<echo message="Loading local.properties" />
		<include buildfile="local.properties" />
	</if>

	<!-- Load default configuration. -->
	<if test="${file::exists('default.properties')}">
		<echo message="Loading default.properties" />
		<include buildfile="default.properties" />
	</if>

	<echo message="Build configuration:" />
	<script language="C#">
		<code>
			<![CDATA[
				public static void ScriptMain(Project project)
				{
					System.Collections.Generic.SortedDictionary<string, string> sortedByKey = new System.Collections.Generic.SortedDictionary<string, string>();
					foreach(DictionaryEntry de in project.Properties)
					{
						sortedByKey.Add(de.Key.ToString(), de.Value.ToString());
					}

					NAnt.Core.Tasks.EchoTask echo = new NAnt.Core.Tasks.EchoTask();
					echo.Project = project;
					foreach(System.Collections.Generic.KeyValuePair<string, string> kvp in sortedByKey)
					{
						if(kvp.Key.StartsWith("nant."))
						{
							continue;
						}

						string value = kvp.Value;
						if (value.Length > 100)
						{
							value = String.Format("{0}...", value.Substring(0, 100));
						}

						echo.Message = String.Format("{0}: {1}", kvp.Key, value);
						echo.Execute();
					}
				}
			]]>
		</code>
	</script>

	<target name="all"
			depends="build-theme, build-setup"
			description="Builds the theme.">
	</target>

	<!-- Cleanup.
	________________________________________________________________________________________________________________ -->
	<target name="clean"
			description="Removes build artifacts.">
		<tc-progress message="Cleaning up"
					 type="Start" />

		<delete dir="${basedir.deployment.artifacts}"
				failonerror="false" />

		<delete dir="${basedir.temp}"
				failonerror="false" />

		<tc-progress message="Cleaning up"
					 type="End" />
	</target>

	<!-- Theme.
	________________________________________________________________________________________________________________ -->
	<target name="init-build"
			description="Initializes the build.">
		<mkdir dir="${basedir.temp}\theme" />
		<mkdir dir="${basedir.temp}\theme\themes\${theme.name}" />
	</target>

	<fileset id="dependencies"
			 basedir="lib">
		<include name="**/*" />
	</fileset>

	<fileset id="tokenizable-files"
			 basedir="source\theme">
		<include name="**/*" />
		<exclude name="images/**/*" />
		<exclude name="**/*.swf" />
	</fileset>

	<fileset id="binaries"
			 basedir="source\theme">
		<include name="bin/*" />
	</fileset>

	<fileset id="images"
			 basedir="source\theme">
		<include name="images/**/*" />
		<exclude name="images/image sources/*" />
	</fileset>

	<fileset id="aspnet-files"
			 basedir="source\">
		<include name="*.*" />
	</fileset>

	<filterchain id="tokens">
		<replacetokens>
			<token key="theme.name"
				   value="${theme.name}" />
			<token key="theme.title"
				   value="${theme.title}" />
			<token key="blog.baseurl"
				   value="${blog.baseurl}" />
			<token key="blog.virtualdirectory"
				   value="${blog.virtualdirectory}" />
			<token key="blog.title"
				   value="${blog.title}" />
			<token key="blog.geo.latitude"
				   value="${blog.geo.latitude}" />
			<token key="blog.geo.longitude"
				   value="${blog.geo.longitude}" />
			<token key="blog.geo.placename"
				   value="${blog.geo.placename}" />
			<token key="blog.geo.region"
				   value="${blog.geo.region}" />
			<token key="vendor.clustrmap.url"
				   value="${vendor.clustrmap.url}" />
			<token key="vendor.delicious.name"
				   value="${vendor.delicious.name}" />
			<token key="vendor.skype.name"
				   value="${vendor.skype.name}" />
			<token key="vendor.lastfm.name"
				   value="${vendor.lastfm.name}" />
			<token key="vendor.feedburner.name"
				   value="${vendor.feedburner.name}" />
			<token key="vendor.googleanalytics.id"
				   value="${vendor.googleanalytics.id}" />
			<token key="vendor.openid.server"
				   value="${vendor.openid.server}" />
			<token key="vendor.openid2.provider"
				   value="${vendor.openid2.provider}" />
			<token key="vendor.openid.delegate"
				   value="${vendor.openid.delegate}" />
			<token key="vendor.idselector.id"
				   value="${vendor.idselector.id}" />
			<token key="vendor.twitter.name"
				   value="${vendor.twitter.name}" />
		</replacetokens>
	</filterchain>

	<target name="build-theme"
			depends="clean, init-build"
			description="Builds the theme.">
		<tc-progress message="Building theme"
					 type="Start" />

		<copy todir="${basedir.temp}\theme\themes\${theme.name}"
			  inputencoding="utf-8"
			  outputencoding="utf-8">
			<fileset refid="tokenizable-files" />
			<filterchain refid="tokens" />
		</copy>

		<copy todir="${basedir.temp}\theme\themes\${theme.name}">
			<fileset refid="images" />
		</copy>

		<copy todir="${basedir.temp}\theme\themes\${theme.name}">
			<fileset refid="binaries" />
		</copy>

		<copy file="${basedir.source}\theme\images\favicon.ico"
			  todir="${basedir.temp}\theme\" />

		<copy todir="${basedir.temp}\theme\bin">
			<fileset refid="dependencies" />
		</copy>

		<copy todir="${basedir.temp}\theme\"
			  inputencoding="utf-8"
			  outputencoding="utf-8">
			<fileset refid="aspnet-files" />
			<filterchain refid="tokens" />
		</copy>

		<!-- Minify JavaScript. -->
		<echo message="Minifiying JavaScript files..." />
		<foreach item="File"
				 property="jsfile">
			<in>
				<items basedir="${basedir.temp}\theme\themes\${theme.name}">
					<include name="**/*.js" />
					<!-- Not compatible. -->
					<exclude name="**/lytebox.js" />
				</items>
			</in>
			<do>
				<echo message="${jsfile}" />
				<exec program="cmd.exe">
					<arg value="/c" />
					<arg value='type "${jsfile}" | "${tools.jazmin}\Jazmin.exe" > "${jsfile}.jazmin"' />
				</exec>
				<move file="${jsfile}.jazmin"
					  tofile="${jsfile}"
					  overwrite="true"/>
			</do>
		</foreach>

		<tc-progress message="Building theme"
					 type="End" />
	</target>

	<!-- Setup.
	________________________________________________________________________________________________________________ -->
	<target name="build-setup"
			depends="build-theme"
			description="Creates the applications' deployment package.">
		<tc-progress message="Building setup"
					 type="Start" />

		<mkdir dir="${basedir.deployment.artifacts}" />

		<zip zipfile="${basedir.deployment.artifacts}\Theme-${build.number}.zip"
			 ziplevel="9">
			<fileset basedir="${basedir.temp}\theme">
				<include name="**/*" />
			</fileset>
		</zip>

		<tc-progress message="Building setup"
					 type="End" />
	</target>

	<!-- Deployment.
	________________________________________________________________________________________________________________ -->
	<target name="init-deploy">
		<fail message="Cannot deploy, property 'deployment.local.path' is empty or does not exist. Enter it in your local.properties file (see local.properties.template for more information)."
			  if="${not property::exists('deployment.local.path') or string::get-length(property::get-value('deployment.local.path')) == 0}" />

		<delete dir="${deployment.local.path}"
				failonerror="false" />

		<mkdir dir="${deployment.local.path}" />
	</target>

	<target name="deploy"
			depends="build-setup, init-deploy"
			description="Deploys the theme to the deployment.local.path path.">
		<tc-progress message="Deploying"
					 type="Start" />

		<unzip zipfile="${basedir.deployment.artifacts}\Theme-${build.number}.zip"
			   todir="${basedir.temp}\deploy" />

		<copy todir="${deployment.local.path}">
			<fileset basedir="${basedir.temp}\deploy\themes\${theme.name}">
				<include name="**/*" />
			</fileset>
		</copy>

		<tc-progress message="Deploying"
					 type="End" />
	</target>
</project>